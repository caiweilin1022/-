飞机大战的HTML5游戏
源代码：
<link rel="stylesheet" href="css/style.css" />
		<script src="lib/common.js"></script>
		<script src="js/Loading.js"></script>
		<script src="js/Logo.js"></script>
		<script src="js/MyPlane.js"></script>
		<script src="js/Bullet.js"></script>
		<script src="js/Enemy.js"></script>
		<script src="js/Scoreboard.js"></script>
		<script src="js/Weapon.js"></script>
		<script src =“js / Engine.js”> </ script>
    </ div>	
      <ul id =“options”class =“options”>
				<li value="1">超级困难</li>
				<li value="2">非常困难</li>
				<li value="3">比较困难</li>
				<li value="4">简单</li>
			</ul>
		</ div>

style.css ：
*{margin:0; padding:0;}
html,body{width:100%; height:100%; overflow: hidden;}
.main{
	margin: auto;
	height: 100%;
	background: url(../images/bg.jpg) repeat-y;
	background-position-y: 0px;
	/*background-position: 0px 1px;*/
	width: 480px;
}
.options{
	position: absolute;
	list-style: none;
	margin: auto;
	left: 0; right: 0; top: 200px;
	width: 200px;
	height: 300px;
}
.options li{
	border-radius: 5px;
	box-shadow: 0 0 2px 1px black;
	float: left;
	width: 200px;
	height: 55px;
	text-align: center;
	line-height: 55px;
	margin-bottom: 20px;
	background: #f40;
	color: white;
	font: "微软雅黑";
	font-size: 28px;
	cursor: pointer;
}
.logo{
	position: absolute;
	left: 0; right: 0; top: 50px;
	margin: auto;
	width: 428px; height: 104px;
	background: url(../images/logo.png) no-repeat;
}
.loading{
	position: absolute;
	left: 0; right: 0; top: 50%;
	margin: auto;
	width: 192px; height: 41px;
	background: url(../images/loading1.png) no-repeat;
}
.my-warplain{
	position: absolute;
	width: 98px; height: 122px;
	background: url(../images/me.png) no-repeat;
}
.bullet{
	position: absolute;
	width: 7px; height: 18px;
	background: url(../images/bullet.png) no-repeat;
}
.bullet_die{
	position: absolute;
	width: 41px; height: 39px;
	background: url(../images/die1.png) no-repeat;
}
.enemy-small{
	position: absolute;
	width: 59px; height: 36px;
	background: url(../images/plane1.png) no-repeat;
}
.enemy-middle{
	position: absolute;
	width: 70px; height: 92px;
	background: url(../images/plane2.png) no-repeat;
}
.enemy-large{
	position: absolute;
	width:165px; height: 256px;
	background: url(../images/plane3.png) no-repeat;
}
.weapon{
	position: absolute;
	width:59px; height: 103px;
	left:0;
	top:0;
	background: url(../images/weapon.png) no-repeat;
}

加载动画：
class Loading{
    constructor(){
        this.timer = null;
    }
    show(){
        let that = this;
        this.ele = document.createElement('div');
        this.ele.className = 'loading';
        document.body.appendChild(this.ele);

        let imgs = ['images/loading1.png','images/loading2.png','images/loading3.png']
        let index = 1;
        this.timer = setInterval(function () {
            that.ele.style.background ='url('+imgs[index%3]+')'
            index++;
        },500);
    }
    hide(){
        clearInterval(this.timer);
        document.body.removeChild(this.ele);
    }
}

logo：
class Logo{
    constructor(){
        this.ele = document.createElement('div');

    }
    show(){
        this.ele.className = 'logo'
        document.body.appendChild(this.ele);
    }
    hide(){
        document.body.removeChild(this.ele);

    }
}

我方飞机：
class MyPlane{
    constructor(weaponLevel=0){
        //飞机发射子弹的速度
        this.frequcy = 0;
        //武器等级，默认等级是0
        this.weaponLevel = weaponLevel;

    }
 //我方飞机  显示
    show(){
        let that = this;
        //创建
        this.ele = document.createElement('div');
        this.ele.className = 'my-warplain';
        document.body.appendChild(this.ele);
        console.log('show')

        //控制飞机的初始位置
        let body_main = document.getElementById('body_main');
        this.ele.style.left = body_main.offsetLeft+body_main.offsetWidth/2-this.ele.offsetWidth/2+'px';
        this.ele.style.top = body_main.offsetHeight-this.ele.offsetHeight+'px'

        //监听飞机移动
        this.move();
        //让飞机发射子弹
        this.fire();

    }
    move(){
   

        let that = this;
        //根据鼠标的坐标 控制 飞机的移动
        let body_main = document.getElementById('body_main');

        let rightSlide = body_main.offsetLeft +body_main.offsetWidth-this.ele.offsetWidth;
        let leftSlide = body_main.offsetLeft;


        document.onmousemove = function (evt) {

            //游戏状态
            if(gameStatus.running == false || gameStatus.stop){
                 return;
            }

            //左右边界
            let left = evt.clientX - that.ele.offsetWidth/2;
            let top = evt.clientY - that.ele.offsetHeight/2;

            if(left < leftSlide){
                left = leftSlide
            }

            if(left > rightSlide){
                left =rightSlide;
            }

            that.ele.style.left = left +'px';
            that.ele.style.top = top +'px';

        }

    }
    fire(){
        var that = this;
        //  产生子弹
        setInterval(function () {
                // this.ele.style.left = myPlane.offsetLeft +myPlane.offsetWidth/2-this.ele.offsetWidth/2+'px';
                //  this.ele.style.top = myPlane.offsetTop -this.ele.offsetHeight+'px';

                //计算出子弹的位置
                 //控制子弹的初始位置 根据飞机来定的
                let x =  that.ele.offsetLeft +that.ele.offsetWidth/2;
                let y = that.ele.offsetTop ;
            if(that.weaponLevel ==0){
                //生产一个子弹

                let tmp =  new Bullet(x,y);
                engine.bullets.push(tmp);
            }else if(that.weaponLevel == 1){
                console.log('武器等级2')
                //发射两个子弹，每个子弹有个 水平偏移
                let tmp =  new Bullet(x,y,10);
                let tmp1 =  new Bullet(x,y,-10);
                engine.bullets.push(tmp,tmp1);
            }else if(that.weaponLevel == 2){
                let tmp =  new Bullet(x,y,0);
                let tmp1 =  new Bullet(x,y,10,10);
                let tmp2 =  new Bullet(x,y,-10,-10);
                engine.bullets.push(tmp,tmp1,tmp2);
            }

        },this.frequcy);
    }
    //我方飞机爆咋
    boom(callback){
        console.log(1)
        var that = this;
        let index = 0;
       let timer =  setInterval(function(){
            console.log(index)
            index++;
            that.ele.style.background = `url(images/me_die${index}.png)`
            if(index == 3){
                  clearInterval(timer);
                  callback();
            }
        },100)
    }

    //武器升级
    weaponUp(){
        if(this.weaponLevel==2){
            return;
        }
        this.weaponLevel++;
      
    }
}

子弹：
class Bullet {
    constructor(x,y,shiftX=0,shiftY=0){
        this.ele = document.createElement('div');
        this.ele.className = 'bullet';
         document.body.appendChild(this.ele)

 //控制子弹的初始位置 根据飞机来定的
      
        //  let myPlane = document.getElementsByClassName('my-warplain')[0];
        // this.ele.style.left = myPlane.offsetLeft +myPlane.offsetWidth/2-this.ele.offsetWidth/2+'px';
        // this.ele.style.top = myPlane.offsetTop -this.ele.offsetHeight+'px';

        //子弹的初始位置
        this.x=x;
        this.y=y;
        //子弹方向的偏移
        this.shiftX = shiftX;
        this.shiftY = shiftY;

        //此处需要减去子弹的宽度的半 和高度 ，否则子弹的初始位置会盖住飞机
        this.ele.style.left = this.x+this.shiftX-this.ele.offsetWidth/2+'px';
        this.ele.style.top = this.y-this.ele.offsetHeight+'px';

        this.speed = 10;

        this.moveTimer = null;
        this.move();
    }
    move () {
        let that = this;
 

        //子弹的运动

        this.ele.moveTimer =  setInterval(function () {
            if(gameStatus.running == false ||gameStatus.stop){
                return;
            }
            that.ele.style.top = that.ele.offsetTop -that.speed +'px';
            if(that.shiftY<0){
                 that.ele.style.left =that.ele.offsetLeft -that.speed/3 +'px';
            }
            if(that.shiftY>0){
                 that.ele.style.left =that.ele.offsetLeft +that.speed/3 +'px';
            }
            //超出屏幕产出子弹
            if(that.ele.offsetTop < -that.ele.offsetHeight){

                clearInterval(that.moveTimer)
                document.body.removeChild(that.ele)
            
               // this
                //engine.bullets.
                let index = 0;
                for(let i=0;i<engine.bullets.length;i++){
                    if(engine[i] == this){
                        index = i;
                    }
                }
                engine.bullets.splice(index,1);

            }

        },50)



    }
    //爆炸 函数
    boom () {
        let that = this;
         this.ele.className = 'bullet_die';
        clearInterval(this.ele.moveTimer);
        setTimeout(function () {
            that.ele.remove();
        },200)
    }
}

敌机：
class Enemy{
    constructor(){
        this.ele = document.createElement('div');
        document.body.appendChild(this.ele);
        this.hp = 5;
        this.speed = 2;
        this.imgsArray = [];
	}
    //受伤
    hurt() {
        this.hp--;
        if(this.hp == 0){
            this.destory();
        }
    }
    destory(){
            clearInterval(this.ele.timer);
            let that = this;
            // plain1_die1
            let index = 0;
            let timer = setInterval(function () {
               let imgName =  that.imgsArray[index];
               that.ele.style.background = 'url('+'images/'+imgName+')'
                index++;
                if(index == that.imgsArray.length){
                    clearInterval(timer)
                    that.ele.remove();
                }
            },50);
    }
    move() {
        let that = this;
        this.ele.timer = setInterval(function () {
            if(gameStatus.running == false ||gameStatus.stop){
                return;
            }
            that.ele.style.top = that.ele.offsetTop + that.speed+'px';
           let body_main = document.getElementById('body_main');
           if(that.ele.offsetTop > body_main.offsetHeight + that.ele.offsetHeight){
                clearInterval(that.ele.timer);
                document.body.removeChild(that.ele);
               console.log('清除定时器')
               let index = 0;
               for(let i=0;i<engine.enemies.length;i++){
                   if(engine[i] == this){
                       index = i;
                   }
               }
               engine.enemies.splice(index,1);
            }
        },50)
    }
    //初始化操作
    init () {
        //飞机的位置控制
        let body_main = document.getElementById('body_main');
        let leftSlide =  body_main.offsetLeft;
        let rightSlide = body_main.offsetLeft +body_main.offsetWidth - this.ele.offsetWidth;
        let left = randomInt(leftSlide,rightSlide)
        this.ele.style.left = left +'px';
        this.ele.style.top = -this.ele.offsetHeight +'px';
	}
}
//三个子类
class SmallEnemy extends Enemy{
    constructor(){
        super();
        this.ele.className = 'enemy enemy-small';
        this.speed = 7;
        this.hp = 1;
        this.imgsArray = ['plain1_die1.png','plain1_die2.png','plain1_die3.png']
        this.init();
    }    
}
class MiddleEnemy extends Enemy {
    constructor(){
        super();
        this.ele.className = 'enemy enemy-middle';
        this.speed = 5;
        this.hp = 3;
        this.imgsArray = ['plain2_die1.png','plain2_die2.png','plain2_die3.png','plain2_die4.png']
        this.init();
    }
}
class LargeEnemy extends Enemy{
    constructor(){
        super();
        this.ele.className = 'enemy enemy-large';
        this.speed = 3;
        this.hp = 6;
        this.imgsArray = ['plain3_die1.png','plain3_die2.png','plain3_die3.png','plain3_die4.png','plain3_die5.png','plain3_die6.png']
        this.init();
    }
}

计分板：
class Scoreboard{
    //计分板
    constructor(){
        this.score = 0;
        this.ele = document.createElement('span');
        this.ele.style.display = 'none';
        this.ele.innerHTML = '分数:'+this.score;
        document.querySelector('.main').appendChild(this.ele);

    }
    show(){
        this.ele.style.display = 'block';
    }
    hide(){
        this.ele.style.display = 'none';
    }
        //更新计分板 //小飞机 100分 中型飞机1200 大型飞机3500 
    updateScore(enemy) {
        if (enemy instanceof SmallEnemy) {
            console.log('SmallEnemy');
            this.score +=1;
        }
        if (enemy instanceof MiddleEnemy) {
            console.log('MiddleEnemy')
             this.score +=2;
        }
        if (enemy instanceof LargeEnemy) {
            console.log('LargeEnemy')
            this.score +=5;
        }
        this.ele.innerHTML = '分数:'+this.score;

    }
}
武器包：
class Weapon {
    constructor() {

        this.ele = document.createElement('div');
        document.body.appendChild(this.ele);
        this.ele.className = 'weapon';

        //武器药的初始位置
        let body_main = document.getElementById('body_main');
        let leftSlide =  body_main.offsetLeft;
        let rightSlide = body_main.offsetLeft +body_main.offsetWidth - this.ele.offsetWidth;
        let left = randomInt(leftSlide,rightSlide)
        
        this.ele.style.top = -this.ele.offsetHeight + 'px';
        this.ele.style.left = left + 'px';
        this.speed = 10;

        this.move();

    }

    //武器药 消失
    boom(){
        clearInterval(this.ele.moveTimer);
        this.ele.remove();
    }
    move() {

        let that = this;
        //武器升级 药 的运动
        this.ele.moveTimer = setInterval(function () {
            if (gameStatus.running == false || gameStatus.stop) {
                return;
            }
            that.ele.style.top = that.ele.offsetTop + that.speed + 'px';
            //超出屏幕 
            if (that.ele.offsetTop < -that.ele.offsetHeight) {
                clearInterval(that.moveTimer)
                document.body.removeChild(that.ele)
                // this
                //engine.
                let index = 0;
                for (let i = 0; i < engine.weapons.length; i++) {
                    if (engine[i] == this) {
                        index = i;
                    }
                }
                engine.weapons.splice(index, 1);
            }

        }, 50)


    }
}

游戏状态：
let gameStatus = {
    running: false,
    stop: false
}

//创建游戏引擎 对象
class Engine {
    constructor() {
        //属性 和 方法
        //空数组 放 所有的敌机i
        this.enemies = [];
        //空数组 放所有 的 敌机
        this.bullets = [];
        //空数组 放所有的 武器
        this.weapons = [];
        this.init();
    }

    //选择游戏难度
    gameOption(callback) {
        let that = this;

        console.log('游戏难度选择处理')
        let optionUl = this.ele.getElementsByClassName('options')[0];
        let opLis = optionUl.getElementsByTagName('li');
        for (let i = 0; i < opLis.length; i++) {
            opLis[i].onclick = function () {
                console.log(this.value)
                switch (this.value) {
                    case 1:
                        //游戏难度 1       600
                        //设置飞机 发射子弹的速度
                        console.log(that.myPlane)
                        that.myPlane.frequcy = 900;

                        break;
                    case 2:
                        //400
                        that.myPlane.frequcy = 600;

                        break;
                    case 3:
                        //200
                        that.myPlane.frequcy = 300;

                        break;
                    case 4:
                        //50
                        that.myPlane.frequcy = 100;
                        break;
                }
                optionUl.style.display = 'none'
                //难度选择了
                //
                callback();

            }
        }

    }
    //logo 显示隐藏
    //初始化操作
    init() {
        let that = this;

        //游戏的场景
        this.ele = document.getElementsByClassName('main')[0];
        //创建我飞机
        this.myPlane = new MyPlane();
        console.log(this.myPlane)

        // logo显示
        that.logo = new Logo();
        that.logo.show();

        //初始化计分板
        this.scoreboard = new Scoreboard();

        this.gameOption(function () {
            console.log('游戏难度已经选择了')
            //loading 显示
            that.loading = new Loading();
            that.loading.show();

            //4秒以后 进度条消失 ，logo 也消失
            setTimeout(function () {
                that.loading.hide();
                that.logo.hide();
                //游戏就要开始了
                that.start();
            }, 4000)
        });
    }
    //游戏开始
    start() {

        this.myPlane.weaponLevel = 0;
        gameStatus.running = true;
        let that = this;
        console.log('游戏开始以后的逻辑')
        //游戏背景运动
        this.backgroundRun();
        //计分板显示
        this.scoreboard.show();
        //我方飞机显示 ,发射子弹
        this.myPlane.show();
        //敌人显示
        //随机出现 在屏幕上方 ，往下运动，
        this.createEnemy();
        this.createWeapon();
        //碰撞检测
        this.check();
        //数组 记录所有的飞机
        this.gamePause();
    }
    //游戏暂停相关
    gamePause() {
        document.onkeydown = function (evt) {
            let e = evt || window.event;
            if (e.keyCode == 13 || e.which == 13) {
                gameStatus.running = !gameStatus.running;
            }
        }
    }
    //游戏背景运动
    backgroundRun() {
        let that = this;
        let bgY = 0;
        setInterval(function () {
            if (gameStatus.running == false || gameStatus.stop) {
                return;
            }
            that.ele.style.backgroundPosition = '0px ' + bgY + 'px';
            bgY += 2;
        }, 30);
    }
    //一直检查是否发生碰撞
    check() {
        let that = this;
        //敌机和我方飞机
        //敌机   classname
        setInterval(function () {
            if (gameStatus.running == false || gameStatus.stop) {
                return;
            }
            //子弹和敌机
            //filter为“过滤”、“筛选”之意。指数组filter后，返回过滤后的新数组
            // filter的callback函数需要返回布尔值true或false. 如果为true则表示，恭喜你，通过啦！如果为false, 只能高歌“我只能无情地将你抛弃……
            that.enemies = that.enemies.filter(function (enemy) {
                let flag = false;//记录是否删除飞机
                that.bullets = that.bullets.filter(function (bullet) {
                    // 如果发生碰撞 就删除字段，并且在数组中删除元素
                    if (that.getCollision(enemy.ele, bullet.ele)) {
                        enemy.hurt();
                        if (enemy.hp == 0) {
                            flag = true;
                        }
                        //删除子弹
                        // bullet.ele.remove();
                        bullet.boom();
                        return false;
                    } else {
                        return true;
                    }
                });
                if (flag) {
                    // enemy.ele.remove();
                    //更新计分板
                    that.scoreboard.updateScore(enemy);
                    return false;
                } else {
                    return true;
                }
            });
            //敌机和我方飞机
            for (let index in that.enemies) {
                let enemy = that.enemies[index];
                if (that.getCollision(enemy.ele, that.myPlane.ele)) {
                    gameStatus.stop = true;
                    that.myPlane.boom(() => {
                        alert('恭喜你获得了' + that.scoreboard.score + '分,点击确定重新开始');
                        location.reload();
                    });
                    break;
                    //游戏结束
                }
            }
            //武器药和我方飞机
            for (let index in that.weapons) {
                let weapon = that.weapons[index];
                if (that.getCollision(weapon.ele, that.myPlane.ele)) {
                    that.myPlane.weaponUp();
                    weapon.boom();          
                    that.weapons.splice(index,1);
                    break;
                    //游戏结束
                }
            }
        }, 50)
    }
    // 生产武器药 
    createWeapon(){
        var that = this;
        setInterval(function () {
            let random = Math.random()
            if (random > 0.5) {
                let tmp = new Weapon();
                that.weapons.push(tmp);
            }
        }, 4000)
    }
    //产生敌机
    createEnemy() {
        let that = this;
        setInterval(function () {
            if (gameStatus.running == false) {
                return;
            }
            let random = Math.random()
            if (random > 0.2) {
                let tmp = new SmallEnemy();
                tmp.move();
                that.enemies.push(tmp)
            }
        }, 500)
        setInterval(function () {
            let random = Math.random()
            if (random > 0.4) {
                let tmp = new MiddleEnemy();
                tmp.move();
                that.enemies.push(tmp)
            }
        }, 2000);
        setInterval(function () {
            let random = Math.random()
            if (random > 0.8) {
                let tmp = new LargeEnemy();
                tmp.move();
                that.enemies.push(tmp)
            }
        }, 6000)
    }
    //碰撞检测方法
    getCollision(obj1, obj2, callback) {
        //参数为碰撞物体与被碰撞物体
        let l1 = obj1.offsetLeft; //左
        let r1 = obj1.offsetLeft + obj1.offsetWidth; //右
        let t1 = obj1.offsetTop; //上
        let b1 = obj1.offsetTop + obj1.offsetHeight; //下

        let l2 = obj2.offsetLeft; //左
        let r2 = obj2.offsetLeft + obj2.offsetWidth; //右
        let t2 = obj2.offsetTop; //上
        let b2 = obj2.offsetTop + obj2.offsetHeight; //下
        if (callback) {
            callback(l1, r1, t1, b1, l2, r2, t2, b2);
        }
        if (r1 < l2 || l1 > r2 || t1 > b2 || b1 < t2) {
            return false;//没有碰撞
        } else {
            return true;
        }
    }
}


